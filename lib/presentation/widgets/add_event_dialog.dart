import 'package:flutter/material.dart';

import '../../application/services/CourseService.dart';
import '../../domain/models/CalendarEvent.dart';
import '../../domain/models/Course.dart';
import '../../domain/models/Professor.dart';
import '../../domain/models/Room.dart';

class AddEventDialog extends StatefulWidget {
  final DateTime selectedDate;
  final Function(CalendarEvent event) onAddEvent;

  const AddEventDialog({
    Key? key,
    required this.selectedDate,
    required this.onAddEvent,
  }) : super(key: key);

  @override
  State<AddEventDialog> createState() => _AddEventDialogState();
}

class _AddEventDialogState extends State<AddEventDialog> {
  TextEditingController titleController = TextEditingController();
  TextEditingController dateController = TextEditingController();
  TextEditingController timeController = TextEditingController();
  TextEditingController durationController = TextEditingController(text: '2');
  Course? selectedCourse;

  Future<List<Course>> _fetchAvailableCourses() async {
    final courseService = CourseService();
    return await courseService.fetchAvailableCourses();
  }

  @override
  void initState() {
    super.initState();
    dateController.text = formatDate(widget.selectedDate);
    timeController.text = formatTime(widget.selectedDate);
  }

  String formatDate(DateTime dateTime) {
    return '${dateTime.year}-${dateTime.month.toString().padLeft(2, '0')}-${dateTime.day.toString().padLeft(2, '0')}';
  }

  String formatTime(DateTime dateTime) {
    return '${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<List<Course>>(
      future: _fetchAvailableCourses(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return CircularProgressIndicator();
        } else if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        } else {
          List<Course> courses = snapshot.data!;

          return AlertDialog(
            title: Text('Add Event'),
            content: SingleChildScrollView(
              child: IntrinsicHeight(
                child: Column(
                  children: [
                    TextField(
                      controller: titleController,
                      decoration: InputDecoration(
                        labelText: 'Enter event title',
                      ),
                    ),
                    SizedBox(height: 10.0),
                    TextField(
                      controller: dateController,
                      decoration:
                          InputDecoration(labelText: 'Date (YYYY-MM-DD)'),
                      enabled: false, // Disable date editing
                    ),
                    SizedBox(height: 10.0),
                    TextField(
                      controller: timeController,
                      decoration: InputDecoration(labelText: 'Time (HH:MM)'),
                      enabled: false, // Disable time editing
                    ),
                    TextField(
                      controller: durationController,
                      decoration:
                          InputDecoration(labelText: 'Duration (hours)'),
                    ),
                    SizedBox(height: 10.0),
                    DropdownButtonFormField<Course>(
                      hint: Text('Select a Course'),
                      value: selectedCourse,
                      items: courses
                          .map<DropdownMenuItem<Course>>((Course course) {
                        return DropdownMenuItem<Course>(
                          value: course,
                          child: Text(course.courseName),
                        );
                      }).toList(),
                      onChanged: (Course? newValue) {
                        setState(() {
                          selectedCourse = newValue;
                        });
                      },
                    ),
                  ],
                ),
              ),
            ),
            actions: [
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: Text('Cancel'),
              ),
              ElevatedButton(
                onPressed: () async {
                  if (selectedCourse != null) {
                    DateTime eventDateTime = DateTime.parse(
                        '${dateController.text} ${timeController.text}');
                    CalendarEvent event = CalendarEvent.autogenerated(
                      title: titleController.text,
                      description: '',
                      // Add description field if needed
                      professor: Professor(
                        id: '1',
                        firstName: 'John',
                        lastName: 'Doe',
                        email: 'john.doe@example.com',
                      ),
                      // Placeholder professor
                      room:  Room(
                        id: '215',
                        name: 'Room 215',
                        building: 'Main Building',
                        floor: '1',
                        seats: [1, 2, 3, 4],
                      ),
                      // Placeholder room
                      course: selectedCourse!,
                      startTime: eventDateTime,
                      endTime: eventDateTime.add(
                          Duration(hours: int.parse(durationController.text))),
                    );
                    widget.onAddEvent(event);
                    Navigator.pop(context);
                  } else {
                    // Handle case where no course is selected (e.g., show a snackbar)
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Please select a course for the event'),
                      ),
                    );
                  }
                },
                child: Text('Add'),
              ),
            ],
          );
        }
      },
    );
  }
}
